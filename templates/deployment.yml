{{ if .Values.config.enablePihole }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pihole
  namespace: {{ .Values.namespace }}
  labels:
    app: pihole
spec:
  selector:
    matchLabels:
      app: pihole
  template:
    metadata:
      labels:
        app: pihole
    spec:
      containers:
        - name: pihole
          image: "{{ .Values.images.pihole.name }}:{{ .Values.images.pihole.tag }}"
          env:
            - name: TZ
              value: {{ .Values.config.timezone }}
            - name: WEBPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pihole-secrets
                  key: WEBPASSWORD
          volumeMounts:
            - name: pihole-vol
              mountPath: /etc/pihole
              subPath: pihole
            - name: pihole-vol-dnsmasq
              mountPath: /etc/dnsmasq.d
              subPath: dnsmasq.d
          ports:
            - containerPort: 53
            - containerPort: 80
      volumes:
        - name: pihole-vol
          persistentVolumeClaim:
            claimName: {{ .Values.config.piholePVC }}
        - name: pihole-vol-dnsmasq
          persistentVolumeClaim:
            claimName: {{ .Values.config.piholePVCDNSMasq }}
{{ end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-miniflux
  namespace: {{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: postgres-miniflux
  template:
    metadata:
      labels:
        app: postgres-miniflux
    spec:
      containers:
        - name: postgres-miniflux
          image: "{{ .Values.images.postgresMiniflux.name }}:{{ .Values.images.postgresMiniflux.tag}}"
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: miniflux
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                    name: postgres-miniflux-secrets
                    key: POSTGRESQL_PASSWORD
            - name: POSTGRES_DATABASE
              value: miniflux
          volumeMounts:
            - name: postgres-miniflux-vol
              mountPath: /var/lib/postgresql/data
              subPath: postgresql
      volumes:
        - name: postgres-miniflux-vol
          persistentVolumeClaim:
            claimName: postgres-miniflux-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: miniflux
  namespace: {{ .Values.namespace }}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: miniflux
  template:
    metadata:
      labels:
        app: miniflux
    spec:
      containers:
        - name: miniflux
          image: "{{ .Values.images.miniflux.name }}:{{ .Values.images.miniflux.tag}}"
          ports:
            - containerPort: 8080
          env:
            - name: RUN_MIGRATIONS
              value: "1"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                    name: miniflux-secrets
                    key: DATABASE_URL
            - name: CREATE_ADMIN
              value: "1"
            - name: ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                    name: miniflux-secrets
                    key: ADMIN_USERNAME
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                    name: miniflux-secrets
                    key: ADMIN_PASSWORD
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: excalidraw
  namespace: {{ .Values.namespace }}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: excalidraw
  template:
    metadata:
      labels:
        app: excalidraw
    spec:
      containers:
        - name: excalidraw
          image: "{{ .Values.images.excalidraw.name }}:{{ .Values.images.excalidraw.tag}}"
          ports:
            - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qbittorrent
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qbittorrent
  template:
    metadata:
      labels:
        app: qbittorrent
    spec:
      containers:
        - name: qbittorrent
          image: "{{ .Values.images.qbittorrent.name }}:{{ .Values.images.qbittorrent.tag}}"
          ports:
            - containerPort: 8080
            - containerPort: 6881
          env:
            - name: WEBUI_PORT
              value: "8080"
            - name: PUID
              value: "1000"
            - name: GUID
              value: "1000"
            - name: TZ
              value: "{{ .Values.config.timezone }}"
          volumeMounts:
            - name: qbittorrent-vol
              mountPath: /config
              subPath: config
            - name: media-vol
              mountPath: /downloads
      volumes:
        - name: qbittorrent-vol
          persistentVolumeClaim:
            claimName: {{ .Values.config.qbittorrentPVC }}
        - name: media-vol
          persistentVolumeClaim:
            claimName: {{ .Values.config.mediaPVC }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jellyfin
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jellyfin
  template:
    metadata:
      labels:
        app: jellyfin
    spec:
      nodeSelector:
        gpu: nvidia
      containers:
        - name: jellyfin
          image: "{{ .Values.images.jellyfin.name }}:{{ .Values.images.jellyfin.tag}}"
          ports:
            - containerPort: 8096
          env:
            - name: PUID
              value: "1000"
            - name: GUID
              value: "1000"
            - name: TZ
              value: "{{ .Values.config.timezone }}"
            - name: NVIDIA_VISIBLE_DEVICES
              value: all
          volumeMounts:
            - name: jellyfin-media-vol
              mountPath: /data/tvshows
              subPath: {{ .Values.config.mediaSeriesDir }}
            - name: jellyfin-media-vol
              mountPath: /data/movies
              subPath: {{ .Values.config.mediaMoviesDir }}
            - name: jellyfin-media-vol
              mountPath: /data/music
              subPath: {{ .Values.config.mediaMusicDir }}
            - name: jellyfin-vol
              mountPath: /config
      volumes:
        - name: jellyfin-media-vol
          persistentVolumeClaim:
            claimName: {{ .Values.config.mediaPVC }}
        - name: jellyfin-vol
          persistentVolumeClaim:
            claimName: {{ .Values.config.jellyfinPVC }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  namespace: {{ .Values.config.prometheusNamespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: "{{ .Values.images.prometheus.name }}:{{ .Values.images.prometheus.tag}}"
        volumeMounts:
        - name: prometheus-config-vol
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
        - name: prometheus-vol
          mountPath: /prometheus
        ports:
        - containerPort: 9090
      volumes:
      - name: prometheus-config-vol
        configMap:
          name: prometheus-config
      - name: prometheus-vol
        persistentVolumeClaim:
          claimName: {{ .Values.config.prometheusPVC }}
      serviceAccountName: prometheus-sa
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: {{ .Values.config.prometheusNamespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
        labels:
          app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: grafana
          image: "{{ .Values.images.grafana.name }}:{{ .Values.images.grafana.tag}}"
          volumeMounts:
            - name: grafana-vol
              mountPath: /var/lib/grafana
          ports:
            - containerPort: 3000
      volumes:
        - name: grafana-vol
          persistentVolumeClaim:
            claimName: {{ .Values.config.grafanaPVC }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flame
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flame
  template:
    metadata:
        labels:
          app: flame
    spec:
      containers:
        - name: flame
          image: "{{ .Values.images.flame.name }}:{{ .Values.images.flame.tag}}"
          env:
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                    name: flame-secrets
                    key: PASSWORD
          volumeMounts:
            - name: flame-vol
              mountPath: /app/data
          ports:
            - containerPort: 5005
      volumes:
        - name: flame-vol
          persistentVolumeClaim:
            claimName: {{ .Values.config.flamePVC }}